FROM nvidia/cuda:11.6.0-devel-ubuntu20.04
WORKDIR /server
VOLUME /data
ENV DEBIAN_FRONTEND=noninteractive

# FROM nvidia/cuda:11.8.0-devel-ubuntu22.04
# install colmap and dependencies
# Prepare and empty machine for building
RUN apt-get update && apt-get install -y \
    git \
    cmake \
    wget \
    build-essential \
    libboost-program-options-dev \
    libboost-filesystem-dev \
    libboost-graph-dev \
    libboost-system-dev \
    libboost-test-dev \
    libeigen3-dev \
    libsuitesparse-dev \
    libfreeimage-dev \
    libmetis-dev \
    libgoogle-glog-dev \
    libgflags-dev \
    libglew-dev \
    qtbase5-dev \
    libqt5opengl5-dev \
    libcgal-dev \
    libmetis-dev

# Build and install ceres solver
RUN apt-get -y install \
    libatlas-base-dev \
    libsuitesparse-dev
ARG CERES_SOLVER_VERSION=2.1.0
RUN git clone https://github.com/ceres-solver/ceres-solver.git --branch ${CERES_SOLVER_VERSION}
RUN cd ceres-solver && \
	mkdir build && \
	cd build && \
	cmake .. -DBUILD_TESTING=OFF -DBUILD_EXAMPLES=OFF && \
	make -j$($(nproc)) && \
	make install

# Build and install COLMAP

# Note: This Dockerfile has been tested using COLMAP pre-release 3.7.
# Later versions of COLMAP (which will be automatically cloned as default) may
# have problems using the environment described thus far. If you encounter
# problems and want to install the tested release, then uncomment the branch
# specification in the line below
RUN git clone https://github.com/colmap/colmap.git --branch 3.7

RUN cd colmap && \
	git checkout dev && \
    wget \
    https://raw.githubusercontent.com/ajbt200128/travel-trails-server/colmap/CMakeLists.txt && \
	mkdir build && \
	cd build && \
	cmake .. && \
	make -j$($(nproc)) && \
	make install


# other updates
RUN apt update -y
RUN apt install -y software-properties-common
RUN add-apt-repository ppa:deadsnakes/ppa
RUN apt update -y
RUN apt install -y python3.9 python3.9-distutils python3-pip netcat
RUN python3.9 -m pip install poetry
RUN apt install ffmpeg libsm6 libxext6  -y

COPY pyproject.toml poetry.lock ./
COPY server ./server
COPY migrations ./migrations
COPY README.md ./
COPY entrypoint.sh ./

RUN poetry install --no-dev


CMD ["poetry", "run", "./entrypoint.sh"]
